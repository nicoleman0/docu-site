{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Corvus Open Source Library","text":"<p>This is a site for hosting open-source security policies and tools. </p> <p>Maintained by Nicholas Coleman.</p>"},{"location":"#policies","title":"Policies","text":"<p>As of now the only security policy listed on this site is an Acceptable-Use Policy.</p> <p>Organizations are free to use it, as long as proper credit is given to the original author of the policy and maintainer of this site.</p>"},{"location":"about/","title":"About","text":"<p>Corvus Library is a dedicated platform for hosting open-source security policies and tools.</p> <p>Curated and maintained by Nicholas Coleman, this site aims to provide organizations with accessible and adaptable resources to enhance their security frameworks.</p>"},{"location":"policies/aup/","title":"Acceptable Use Policy (AUP)","text":"<p>Organization: [ORGANIZATION NAME] Effective Date: [DATE] Author: Nicholas H. Coleman</p>"},{"location":"policies/aup/#1-purpose","title":"1. Purpose","text":""},{"location":"policies/aup/#11","title":"1.1","text":"<p>This Acceptable Use Policy defines acceptable use practices for all company-provided systems. These rules are in place to establish what is acceptable and ensure that all systems are operated in a responsible, secure, and legally compliant manner.</p>"},{"location":"policies/aup/#12","title":"1.2","text":"<p>This policy applies to all [ORGANIZATION NAME] employees, agents, contractors, suppliers, business partners, and users who have access to [ORGANIZATION NAME]'s information systems and assets.</p>"},{"location":"policies/aup/#2-scope","title":"2. Scope","text":""},{"location":"policies/aup/#21","title":"2.1","text":"<p>This policy applies to all:</p> <ul> <li>Laptops and desktops</li> <li>Mobile phones/devices</li> <li>Email and team-communication platforms</li> <li>Cloud platforms</li> <li>Wi-Fi and company network access</li> <li>Internet and intranet use</li> </ul>"},{"location":"policies/aup/#3-general-use-ownership","title":"3. General Use &amp; Ownership","text":""},{"location":"policies/aup/#31","title":"3.1","text":"<p>Company-provided systems, resources, and platforms may only be used for:</p> <ul> <li>Working in your official capacity as an employee of [ORGANIZATION NAME]</li> <li>Communication with colleagues, clients, and management</li> <li>Accessing and using internet resources required for your work</li> <li>Limited personal use following security guidelines</li> </ul>"},{"location":"policies/aup/#32","title":"3.2","text":"<p>Access requests must be authorized by departmental supervisors. Authorized users are accountable for all activity that takes place under their username.</p>"},{"location":"policies/aup/#33","title":"3.3","text":"<p>Users should be aware that any data they create on company systems becomes the property of [ORGANIZATION NAME]. There is no guarantee of privacy or confidentiality for information stored on company devices.</p>"},{"location":"policies/aup/#34","title":"3.4","text":"<p>For maintenance and security reasons, authorized IT personnel may monitor systems and network traffic at any time. [ORGANIZATION NAME]'s IT department reserves the right to audit networks and systems to ensure compliance with this policy.</p>"},{"location":"policies/aup/#35","title":"3.5","text":"<p>[ORGANIZATION NAME]'s IT department reserves the right to remove any non-business-related software, files, or data from any system (for example, games, music files, image files, shareware, instant messaging applications).</p>"},{"location":"policies/aup/#4-prohibited-use","title":"4. Prohibited Use","text":""},{"location":"policies/aup/#41","title":"4.1","text":"<p>The following use is strictly prohibited:</p> <ul> <li>Downloading unapproved software</li> <li>Accessing or sharing illegal, discriminatory, fraudulent, or offensive content</li> <li>Using company resources for personal commercial activity or freelance work</li> <li>Circumventing or disabling security controls</li> <li>Sharing login credentials or using another individual's account</li> <li>Connecting unauthorized devices to the company network</li> <li>Storing or archiving company data on unauthorized personal devices</li> <li>Using company communication platforms to bully, insult, or harass</li> <li>Sending unsolicited or unauthorized advertising, promotional material, or spam</li> <li>Engaging in any activity that violates applicable local, national, or international laws</li> </ul>"},{"location":"policies/aup/#5-security-information","title":"5. Security Information","text":""},{"location":"policies/aup/#51","title":"5.1","text":"<p>All users connected to the internal network must comply with this policy and the following related security policies:</p> <ul> <li>Personal Device Acceptable Use and Security</li> <li>Password Policy</li> <li>Anti-Virus</li> <li>Wi-Fi Connectivity</li> <li>Email Safety</li> <li>Cloud Computing</li> <li>Account Management</li> </ul>"},{"location":"policies/aup/#52","title":"5.2","text":"<p>System and user passwords must comply with the Password Policy set forth by [ORGANIZATION NAME]. Users must not share login credentials, passwords, PINs, security tokens, or any authentication information.</p>"},{"location":"policies/aup/#53","title":"5.3","text":"<p>It is prohibited to provide access to another individual, whether deliberate or through negligence.</p>"},{"location":"policies/aup/#54","title":"5.4","text":"<p>All systems and workstations must be secured with password-protected login screens, with automatic lock activation set at 10 minutes or less.</p>"},{"location":"policies/aup/#55","title":"5.5","text":"<p>Devices must be locked when unattended. At the end of each workday, users should log off or restart workstations. Do not shut down your workstation.</p>"},{"location":"policies/aup/#56","title":"5.6","text":"<p>Users are responsible for reporting theft, loss, or unauthorized disclosure of [ORGANIZATION NAME] information to their immediate supervisor.</p>"},{"location":"policies/aup/#57","title":"5.7","text":"<p>Users must report any weaknesses, vulnerabilities, or violations of this policy to their supervisor.</p>"},{"location":"policies/aup/#58","title":"5.8","text":"<p>Users must exercise caution when opening email attachments from unknown or suspicious senders.</p>"},{"location":"policies/aup/#59","title":"5.9","text":"<p>Avoid using public Wi-Fi networks when accessing sensitive company systems unless using a [ORGANIZATION NAME]-approved VPN.</p>"},{"location":"policies/aup/#6-monitoring-enforcement","title":"6. Monitoring &amp; Enforcement","text":""},{"location":"policies/aup/#61","title":"6.1","text":"<p>[ORGANIZATION NAME] reserves the right to monitor and inspect system usage to ensure compliance. Violations may result in disciplinary action, revoked access, termination, or legal consequences.</p>"},{"location":"policies/aup/#7-acknowledgement","title":"7. Acknowledgement","text":"<p>All users must acknowledge this policy as a condition of [ORGANIZATION NAME] system access.</p> <p>Name: ___ Date: ___</p>"},{"location":"tools/dnspy/","title":"DNSpy","text":"<p>DNSpy is a small GUI tool for performing DNS queries and basic enumeration of common DNS record types.</p> <p>GitHub Repo</p>"},{"location":"tools/dnspy/#overview","title":"Overview","text":"<p>DNSpy provides a simple Tkinter-based interface to run DNS queries (A, AAAA, CNAME, MX, NS, TXT, SOA) and view results in a scrolling output pane. It supports verbose mode, multi-threaded query execution, and error logging.</p>"},{"location":"tools/dnspy/#features","title":"Features","text":"<ul> <li>Query common DNS record types (A, AAAA, CNAME, MX, NS, TXT, SOA)</li> <li>Toggle verbose output</li> <li>Multi-threaded enumeration to keep the UI responsive</li> <li>Error logging to dns_query_errors.log</li> <li>Small, single-file GUI entrypoint: <code>dnspy_gui.DNSpyGUI</code></li> </ul>"},{"location":"tools/dnspy/#installation","title":"Installation","text":"<ul> <li> <p>Ensure Python 3.x is installed.</p> </li> <li> <p>Get the files</p> </li> </ul> <pre><code>git clone https://github.com/nicoleman0/DNSpy\ncd DNSpy\n</code></pre> <ul> <li>Install dependencies:</li> </ul> <pre><code>pip install dnspython\n</code></pre>"},{"location":"tools/dnspy/#quick-start-gui","title":"Quick Start \u2014 GUI","text":"<p>Run the main GUI application:</p> <pre><code>python dnspy_gui.py\n</code></pre> <p>Usage flow:</p> <ol> <li>Enter a target domain in the \"Target Domain\" field.</li> <li>Check or uncheck the DNS record types to query.</li> <li>Toggle \"Verbose Output\" to see per-query status.</li> <li>Click \"Run (F5)\" or press F5 to start enumeration.</li> <li>Results and errors appear in the output pane. See the implementation in <code>dnspy_gui.DNSpyGUI</code>.</li> </ol>"},{"location":"tools/dnspy/#quick-start-programmatic-api","title":"Quick Start \u2014 Programmatic API","text":"<p>You can call the DNS query function directly from your code:</p> <pre><code>from query import query_dns\n\n# Query A records\nresults = query_dns(\"example.com\", \"A\")\n\n# Query MX records using specific nameservers\nresults = query_dns(\"example.com\", \"MX\", nameservers=[\"8.8.8.8\", \"8.8.4.4\"])\n</code></pre> <p>Function implementation: see <code>query.query_dns</code> for behavior and error logging.</p>"},{"location":"tools/dnspy/#logging-errors","title":"Logging &amp; Errors","text":"<p>DNS errors are logged to <code>dns_query_errors.log</code>. The GUI shows brief error messages in the output pane; detailed errors are written to the log file.</p>"},{"location":"tools/dnspy/#development","title":"Development","text":"<ul> <li>GUI code: <code>dnspy_gui.py</code> \u2014 contains the Tkinter app and <code>DNSpyGUI</code> class.</li> <li>Query logic: <code>query.py</code> \u2014 contains <code>query_dns</code> and logging setup.</li> </ul> <p>Contributions:</p> <ul> <li>Open a PR, include tests if applicable, and follow the MIT license in LICENSE.</li> </ul>"},{"location":"tools/dnspy/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If queries time out or fail, try using explicit nameservers with <code>query_dns(..., nameservers=[...])</code>.</li> <li>Ensure network/DNS access is available from the host running the tool.</li> </ul>"},{"location":"tools/vtscan/","title":"VTScan --- VirusTotal URL Scanner","text":"<p>A command-line tool to scan URLs via the VirusTotal API and generate reports.</p> <p>GitHub Repo</p>"},{"location":"tools/vtscan/#overview","title":"Overview","text":"<p>VTScan is a Python-built CLI tool designed with the express intent to simplify bulk URL scanning. It uses the VirusTotal API (v3), and after scanning it produces both a spreadsheet (Excel) and an HTML report.</p> <p>Key features include:</p> <ul> <li>Scans one or more URLs in a single run.</li> <li>Accepts a VirusTotal API key either via command-line option or interactive prompt.</li> <li>Outputs a results workbook (<code>results.xlsx</code>) and a human-readable HTML report (<code>report.html</code>) using Jinja2.</li> <li>Displays progress updates, handles errors gracefully, and supports bulk workflows.</li> </ul> <p>This tool is suited for analysts, SOC engineers or GRC practitioners who need to screen lists of URLs for malicious or suspicious verdicts in a repeatable way. It speeds up the process and allows for time to be spent on more productive matters.</p>"},{"location":"tools/vtscan/#prerequisites","title":"Prerequisites","text":"<p>In order to use VTScan as intended, you will need:</p> <ul> <li>Python 3.7 or higher (recommended)</li> <li>A valid VirusTotal API v3 key (free or paid tier)</li> <li>Note: If using a free (public) key, there are rate limits.</li> <li>Install the required Python packages:</li> </ul> <p><code>bash   pip install typer typing_extensions vt pandas jinja2</code></p> <p>(Alternatively install via <code>requirements.txt</code>.) (GitHub)</p>"},{"location":"tools/vtscan/#installation","title":"Installation","text":"<ol> <li> <p>Clone or download the VTScan repository:</p> <p><code>bash git clone https://github.com/nicoleman0/VTScan.git cd VTScan</code></p> </li> <li> <p>(Optional) Create a virtual environment and activate it:</p> <p><code>bash python3 -m venv .venv source .venv/bin/activate</code></p> </li> <li> <p>Install dependencies via pip:</p> <p><code>bash pip install -r requirements.txt</code> or install individually as shown above.</p> </li> </ol>"},{"location":"tools/vtscan/#usage","title":"Usage","text":""},{"location":"tools/vtscan/#basic-invocation","title":"Basic invocation","text":"<pre><code>python3 main.py &lt;url1&gt; &lt;url2&gt; ... [options]\n</code></pre> <p>For example:</p> <pre><code>python3 main.py https://example.com http://malicious-site.test\n</code></pre> <p>This will prompt for your API key (if not given via option) and then scan the URLs, producing <code>results.xlsx</code> and <code>report.html</code>. (GitHub)</p>"},{"location":"tools/vtscan/#view-help-options","title":"View help / options","text":"<pre><code>python3 main.py --help\n</code></pre> <p>This will list available flags/options, input formats, and output customizations.</p>"},{"location":"tools/vtscan/#options","title":"Options","text":"<p>Below are commonly supported options (based on the code structure; adjust if you add/modify):</p> <ul> <li> <p><code>-k</code>, <code>--apikey</code> : Provide your VirusTotal API key via command line.</p> </li> <li> <p><code>-o</code>, <code>--output</code> : Specify the output directory or base filename (if supported).</p> </li> <li> <p><code>--urls-file</code> : (If implemented) Provide a file which contains a list of URLs to scan, one per line.</p> </li> <li> <p><code>--template</code> : (If configurable) Specify a custom HTML template for the report.</p> </li> <li> <p>Rate-limit / delay options: If the tool supports automatically pausing between requests to avoid hitting API quota.</p> </li> <li> <p>Error handling flags: e.g., skip on error, retry logic, etc.</p> </li> </ul> <p>Note: Because the repo is relatively small, you may want to review <code>main.py</code>, <code>scan.py</code>, <code>generate.py</code> for exact available options.</p>"},{"location":"tools/vtscan/#internals-workflow","title":"Internals / Workflow","text":"<p>Here's a high-level overview of how VTScan works internally:</p> <ol> <li> <p>URL ingestion -- The tool parses command-line URLs (and/or a file list) and filters/normalises them.</p> </li> <li> <p>VirusTotal API interaction -- Using the <code>vt</code> Python client library, it sends each URL to VirusTotal's URL analysis endpoint, retrieves the report.</p> <ul> <li> <p>It must handle API key authentication, request rate limiting, and error states (e.g., \"queued\" status).</p> </li> <li> <p>Refer to official docs for API v3 usage. (VirusTotal)</p> </li> </ul> </li> <li> <p>Data collection -- For each URL the tool extracts key fields/allows summarised verdicts (such as malicious_count, harmless_count, last_analysis_date, etc.).</p> </li> <li> <p>Workbook generation -- Leveraging <code>pandas</code>, the results are consolidated into an Excel (.xlsx) workbook (<code>results.xlsx</code>).</p> </li> <li> <p>HTML report generation -- Via <code>jinja2</code> templating, the tool uses <code>template.html</code> to render a human-readable HTML report summarising the results (e.g., number of malicious URLs, top verdicts, links to full reports).</p> </li> <li> <p>Output -- The generated files are placed in the working directory or specified output directory; progress is printed to console.</p> </li> <li> <p>Post-processing / workbook utilities -- The <code>workbook.py</code> may include helper functions to inspect or filter the workbook after generation (e.g., pivoting results, adding summary sheets).</p> </li> </ol>"},{"location":"tools/vtscan/#file-description","title":"File description","text":"<ul> <li> <p><code>main.py</code> -- The entry point CLI logic (argument parsing, overall workflow)</p> </li> <li> <p><code>scan.py</code> -- Contains logic to perform individual URL scans (API calls, error handling)</p> </li> <li> <p><code>generate.py</code> -- Logic to generate outputs: Excel workbook, HTML report</p> </li> <li> <p><code>workbook.py</code> -- Helper module for workbook manipulation/summary generation</p> </li> <li> <p><code>template.html</code> -- The HTML template for the HTML report</p> </li> <li> <p><code>requirements.txt</code> -- Python dependencies list</p> </li> <li> <p><code>LICENSE.txt</code> -- MIT license text</p> </li> <li> <p><code>.gitignore</code> -- Typical Python/IDE ignore file</p> </li> <li> <p><code>README.md</code> -- Basic overview (your current README)</p> </li> </ul>"},{"location":"tools/vtscan/#examples","title":"Examples","text":""},{"location":"tools/vtscan/#example-1-single-url","title":"Example 1: Single URL","text":"<pre><code>python3 main.py https://safe-site.example.com\n</code></pre> <p>Output:</p> <ul> <li> <p><code>results.xlsx</code> -- Excel file listing the URL and verdict (e.g., harmless)</p> </li> <li> <p><code>report.html</code> -- HTML summarising 1-URL scan.</p> </li> </ul>"},{"location":"tools/vtscan/#example-2-multiple-urls","title":"Example 2: Multiple URLs","text":"<pre><code>python3 main.py https://site1.example.com http://suspect.test https://another.good.site\n</code></pre> <p>Output:</p> <ul> <li> <p>Workbook with three rows (one per URL)</p> </li> <li> <p>HTML report with totals (e.g., 3 scanned, 1 flagged malicious)</p> </li> </ul>"},{"location":"tools/vtscan/#example-3-with-api-key-via-option","title":"Example 3: With API key via option","text":"<pre><code>python3 main.py https://example.com -k YOUR_API_KEY_HERE\n</code></pre> <p>This avoids the interactive prompt for your key and is useful for automation.</p>"},{"location":"tools/vtscan/#example-4-batch-via-url-list-if-supported","title":"Example 4: Batch via URL list (if supported)","text":"<p>If you add support (or if the tool supports) a <code>--urls-file urls.txt</code>, you might run:</p> <pre><code>python3 main.py --urls-file urls.txt -k YOUR_API_KEY_HERE\n</code></pre> <p>where <code>urls.txt</code> contains one URL per line.</p>"},{"location":"tools/vtscan/#best-practices-notes","title":"Best Practices &amp; Notes","text":"<ul> <li> <p>Use a dedicated VirusTotal API key and monitor your quota usage. Free keys have rate limits and automated bulk scans may exhaust them quickly. (VirusTotal)</p> </li> <li> <p>Respect privacy and sensitive data. Please do not scan URLs that expose confidential information unless you have rights/consent, because once sent to VirusTotal they become part of the public dataset, viewable to anyone.</p> </li> <li> <p>In an SOC/GRC context: Use VTScan as part of a workflow: e.g., export indicators from your SOC, feed them into VTScan, generate reports, filter for high-risk URLs and then escalate.</p> </li> <li> <p>Consider adding logging/CSV output if you wish to integrate into SIEM or downstream workflows.</p> </li> </ul>"},{"location":"tools/vtscan/#troubleshooting","title":"Troubleshooting","text":"Issue Possible cause &amp; resolution \"Invalid API key\" or \"authentication failed\" Confirm you supplied the key correctly (via <code>-k</code> or prompt), check for leading/trailing spaces or newline characters. \"Rate limit exceeded\" or very slow processing You're hitting the free-key quota or making too many requests per minute. Add delays or upgrade your plan. No output file generated Check working directory permissions, ensure Python can write files, check if program aborted early due to error. <code>report.html</code> is empty or broken template Ensure <code>template.html</code> exists, confirm <code>jinja2</code> is installed, verify the HTML template path if you modified directory structure. Workbook missing expected columns The API may have returned fewer fields; check versions of <code>pandas</code> and <code>vt</code> library. Also inspect <code>workbook.py</code> logic for field extraction."},{"location":"tools/vtscan/#contributing","title":"Contributing","text":"<p>Contributions are welcome! Here are some suggestions:</p> <ul> <li> <p>Add support for reading URLs from input files (<code>.txt</code>, <code>.csv</code>), or via stdin.</p> </li> <li> <p>Add additional output formats: e.g., JSON, CSV, or a Markdown summary for GitHub Actions.</p> </li> <li> <p>Improve the HTML template: add charts (e.g., bar chart of verdict counts) using libraries like <code>plotly</code> or <code>matplotlib</code>.</p> </li> <li> <p>Add multi\u2010threading or asynchronous calls for faster scanning of large lists (while still respecting rate limits).</p> </li> <li> <p>Add integration with a SIEM or Slack notification when malicious URLs are found.</p> </li> <li> <p>Write additional tests for <code>scan.py</code>, <code>generate.py</code> and improve error-handling coverage.</p> </li> </ul> <p>If you submit a pull request:</p> <ul> <li> <p>Fork the repository, create a feature branch, write unit tests when applicable.</p> </li> <li> <p>Ensure compatibility with Python 3.7+ and include any new dependencies in <code>requirements.txt</code>.</p> </li> </ul>"},{"location":"tools/vtscan/#versioning-releases","title":"Versioning &amp; Releases","text":"<p>This repository uses semantic versioning (e.g., v1.0.2 is one of the releases).</p> <p>For major updates (breaking changes), increment the major version; for backwards\u2010compatible enhancement, increment minor version; for bug fixes, increment patch version.</p>"},{"location":"tools/vtscan/#license","title":"License","text":"<p>VTScan is licensed under the MIT License. See the <code>LICENSE.txt</code> file for full text. (GitHub)</p>"},{"location":"tools/vtscan/#acknowledgments","title":"Acknowledgments","text":"<ul> <li> <p>The <code>vt</code> Python client library (used to interact with VirusTotal's API)</p> </li> <li> <p>The developers of the VirusTotal API and community contributions documented in their Developer Hub. (VirusTotal)</p> </li> <li> <p>Myself. For creating the tool.</p> </li> </ul>"}]}